{
  "version": 3,
  "sources": ["../../../app/routes/app.comparison.fixed-btn.tsx", "../../../app/components/PreviewFixedCompareButton/FixedCompareButton.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\app.comparison.fixed-btn.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\app.comparison.fixed-btn.tsx\");\n  import.meta.hot.lastModified = \"1702635138448.1487\";\n}\n// REMIX HMR END\n\nimport { BlockStack, Box, ContextualSaveBar, Divider, Frame, InlineStack, Page, Text } from \"@shopify/polaris\";\nimport { BooleanSetting } from \"~/components/BooleanSetting\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { ColorSetting } from \"~/components/ColorSetting\";\nimport { json } from \"@remix-run/node\";\nimport { authenticate } from \"~/shopify.server\";\nimport { GET_APP_METAFIELDS, GET_CURRENT_APP_ID } from \"~/graphql/query\";\nimport { useLoaderData, useSubmit } from \"@remix-run/react\";\nimport { SET_METAFIELDS } from \"~/graphql/mutation\";\nimport { arrayToObjectMetafield, deepEqualObject } from \"~/services/converter\";\nimport { Metafields } from \"~/constants/namespaces\";\nimport { defaultStylesForFixedButton } from \"~/constants/defaults\";\nimport { PreviewFixedCompareButton } from \"~/components/PreviewFixedCompareButton/FixedCompareButton\";\nimport { MetafieldsType } from \"~/constants/types\";\nimport { MetafieldsFixedButtonKeys } from \"~/constants/keys\";\nexport const loader = async ({\n  request\n}) => {\n  const {\n    admin\n  } = await authenticate.admin(request);\n  const appId = await admin.graphql(GET_CURRENT_APP_ID);\n  const appIdJson = await appId.json();\n  const id = appIdJson.data.currentAppInstallation.id;\n  const metafields = await admin.graphql(GET_APP_METAFIELDS, {\n    variables: {\n      ownerId: id,\n      namespace: Metafields.FixedButton\n    }\n  });\n  const metafieldsJSON = await metafields.json();\n  const arrayMetafields = metafieldsJSON.data.appInstallation.metafields.edges;\n  let fixedButton;\n  if (arrayMetafields.length === 0) {\n    fixedButton = defaultStylesForFixedButton;\n  } else {\n    fixedButton = arrayToObjectMetafield(arrayMetafields);\n  }\n  return json({\n    fixedButton\n  });\n};\nexport const action = async ({\n  request\n}) => {\n  const {\n    admin\n  } = await authenticate.admin(request);\n  const formData = await request.formData();\n  const objectFD = Object.fromEntries(formData);\n  const dataFormData = await JSON.parse(String(objectFD.data));\n  const appId = await admin.graphql(GET_CURRENT_APP_ID);\n  const appIdJson = await appId.json();\n  const id = appIdJson.data.currentAppInstallation.id;\n  await admin.graphql(SET_METAFIELDS, {\n    variables: {\n      metafields: [{\n        namespace: Metafields.FixedButton,\n        type: MetafieldsType.Boolean,\n        key: MetafieldsFixedButtonKeys.Show,\n        value: String(dataFormData.fixedButton.show),\n        ownerId: id\n      }, {\n        namespace: Metafields.FixedButton,\n        type: MetafieldsType.Boolean,\n        key: MetafieldsFixedButtonKeys.ShowLabel,\n        value: String(dataFormData.fixedButton.showLabel),\n        ownerId: id\n      }, {\n        namespace: Metafields.FixedButton,\n        type: MetafieldsType.Color,\n        key: MetafieldsFixedButtonKeys.BackColor,\n        value: String(dataFormData.fixedButton.backColor),\n        ownerId: id\n      }, {\n        namespace: Metafields.FixedButton,\n        type: MetafieldsType.Color,\n        key: MetafieldsFixedButtonKeys.TextColor,\n        value: String(dataFormData.fixedButton.textColor),\n        ownerId: id\n      }]\n    }\n  });\n  return null;\n};\nexport default function StickyFixedButtonSettings() {\n  _s();\n  const {\n    fixedButton\n  } = useLoaderData();\n  const submit = useSubmit();\n  const [showStickyButton, setShowStickyButton] = useState(fixedButton.show === \"true\");\n  const [showLabel, setShowLabel] = useState(fixedButton.showLabel === \"true\");\n  const [backColor, setBackColor] = useState(fixedButton.backColor);\n  const [textColor, setTextColor] = useState(fixedButton.textColor);\n  const [actualData, setActualData] = useState(true);\n  const [loadedData, setLoadedData] = useState(false);\n  const handleShowStickyButtonOnChange = () => {\n    setShowStickyButton(!showStickyButton);\n  };\n  const handleShowLabelOnChange = () => {\n    setShowLabel(!showLabel);\n  };\n  const handleBackColorOnChange = color => {\n    setBackColor(color);\n  };\n  const handleTextColorOnChange = color => {\n    setTextColor(color);\n  };\n  const handleDiscardActionOnClick = () => {\n    setShowStickyButton(fixedButton.show === \"true\");\n    setShowLabel(fixedButton.showLabel === \"true\");\n    setBackColor(fixedButton.backColor);\n    setTextColor(fixedButton.textColor);\n  };\n  const currentDataInClientObject = useMemo(() => {\n    return {\n      show: String(showStickyButton),\n      showLabel: String(showLabel),\n      backColor: backColor,\n      textColor: textColor\n    };\n  }, [showStickyButton, showLabel, backColor, textColor]);\n  useEffect(() => {\n    setActualData(deepEqualObject(currentDataInClientObject, fixedButton));\n    setLoadedData(false);\n  }, [fixedButton, currentDataInClientObject]);\n  const handleSaveOnClick = () => {\n    const data = JSON.stringify({\n      fixedButton: {\n        show: showStickyButton,\n        showLabel: showLabel,\n        backColor: backColor,\n        textColor: textColor\n      }\n    });\n    submit({\n      data\n    }, {\n      method: \"POST\"\n    });\n    setLoadedData(true);\n    return;\n  };\n  return <>\r\n            <Frame>\r\n                <InlineStack gap=\"200\" wrap={false}>\r\n                    <Box background={\"bg-fill\"} width={\"400px\"} borderColor={\"border\"} minHeight={\"100vh\"} borderWidth={\"050\"}>\r\n                        <Page>\r\n                            <BlockStack gap={\"300\"}>\r\n                                {!actualData && <>\r\n                                        <ContextualSaveBar alignContentFlush message=\"Unsaved changes\" saveAction={{\n                  onAction: handleSaveOnClick,\n                  loading: loadedData\n                }} discardAction={{\n                  onAction: handleDiscardActionOnClick\n                }} />\r\n                                    </>}\r\n\r\n                                <Text as={\"h4\"} variant={\"headingMd\"}>Sticky Fixed Button</Text>\r\n\r\n                                <Divider borderColor={\"border\"} />\r\n\r\n                                <BooleanSetting title={\"Show sticky fixed button\"} value={showStickyButton} valueOnChange={handleShowStickyButtonOnChange} />\r\n\r\n                                <Divider borderColor={\"border\"} />\r\n\r\n                                <Text as={\"h4\"} variant={\"headingSm\"}>Sticky Fixed Button</Text>\r\n\r\n                                <BooleanSetting title={\"Show Label\"} value={showLabel} valueOnChange={handleShowLabelOnChange} />\r\n\r\n                                <Divider borderColor={\"border\"} />\r\n\r\n                                <Text as={\"h4\"} variant={\"headingSm\"}>Style</Text>\r\n\r\n                                <ColorSetting title={\"Background Color\"} initialColor={backColor} onChange={handleBackColorOnChange} />\r\n\r\n                                <ColorSetting title={\"Text Color\"} initialColor={textColor} onChange={handleTextColorOnChange} />\r\n                            </BlockStack>\r\n                        </Page>\r\n                    </Box>\r\n                    <Box background={\"bg-fill-tertiary-active\"} minHeight={\"100%\"}>\r\n                        <div style={{\n            width: \"1000px\",\n            height: \"100%\",\n            border: \"1px solid black\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          }}>\r\n                            <PreviewFixedCompareButton showLabel={showLabel} backColor={backColor} textColor={textColor} />\r\n                        </div>\r\n                    </Box>\r\n                </InlineStack>\r\n            </Frame>\r\n        </>;\n}\n_s(StickyFixedButtonSettings, \"/MfDORLoyPUmEcL7Zl2CWGFKkpw=\", false, function () {\n  return [useLoaderData, useSubmit];\n});\n_c = StickyFixedButtonSettings;\nvar _c;\n$RefreshReg$(_c, \"StickyFixedButtonSettings\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\components\\\\\\\\PreviewFixedCompareButton\\\\\\\\FixedCompareButton.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\components\\\\PreviewFixedCompareButton\\\\FixedCompareButton.tsx\");\n  import.meta.hot.lastModified = \"1702557999928.74\";\n}\n// REMIX HMR END\n\nconst PreviewFixedCompareButton = ({\n  showLabel,\n  textColor,\n  backColor\n}) => {\n  return <>\r\n            <div style={{\n      display: \"flex\",\n      backgroundColor: \"#ffffff\",\n      color: `${textColor}`,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      fontWeight: 600,\n      fontSize: \"18px\",\n      width: \"130px\",\n      height: \"55px\",\n      border: `2px solid ${backColor}`,\n      boxShadow: `${backColor} 4px 4px 0 0`,\n      borderRadius: \"10px\"\n    }}>\r\n                {showLabel && \"Compare\"}\r\n            </div>\r\n        </>;\n};\n_c = PreviewFixedCompareButton;\nexport { PreviewFixedCompareButton };\nvar _c;\n$RefreshReg$(_c, \"PreviewFixedCompareButton\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["init_esm", "import_jsx_dev_runtime", "_c"]
}
