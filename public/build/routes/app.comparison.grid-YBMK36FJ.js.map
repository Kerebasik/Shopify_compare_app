{
  "version": 3,
  "sources": ["../../../app/routes/app.comparison.grid.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\app.comparison.grid.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\app.comparison.grid.tsx\");\n  import.meta.hot.lastModified = \"1702560598380.9492\";\n}\n// REMIX HMR END\n\nimport { BlockStack, Box, ContextualSaveBar, Divider, ExceptionList, Frame, InlineStack, Page, Text } from \"@shopify/polaris\";\nimport { BooleanSetting } from \"~/components/BooleanSetting\";\nimport { NoteMinor } from \"@shopify/polaris-icons\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { ColorSetting } from \"~/components/ColorSetting\";\nimport { authenticate } from \"~/shopify.server\";\nimport { json } from \"@remix-run/node\";\nimport { GET_APP_METAFIELDS, GET_CURRENT_APP_ID } from \"~/graphql/query\";\nimport { Metafields } from \"~/constants/namespaces\";\nimport { defaultStylesForProductsGridButton } from \"~/constants/defaults\";\nimport { arrayToObjectMetafield, deepEqualObject } from \"~/services/converter\";\nimport { useLoaderData, useSubmit } from \"@remix-run/react\";\nimport { SET_METAFIELDS } from \"~/graphql/mutation\";\nimport { MetafieldsType } from \"~/constants/types\";\nimport { MetafieldsProductsGridButtonKeys } from \"~/constants/keys\";\nexport const loader = async ({\n  request\n}) => {\n  const {\n    admin\n  } = await authenticate.admin(request);\n  const appId = await admin.graphql(GET_CURRENT_APP_ID);\n  const appIdJson = await appId.json();\n  const id = appIdJson.data.currentAppInstallation.id;\n  const metafields = await admin.graphql(GET_APP_METAFIELDS, {\n    variables: {\n      ownerId: id,\n      namespace: Metafields.ProductsGridButton\n    }\n  });\n  const metafieldsJSON = await metafields.json();\n  const arrayMetafields = metafieldsJSON.data.appInstallation.metafields.edges;\n  let productsGridButton;\n  if (arrayMetafields.length === 0) {\n    productsGridButton = defaultStylesForProductsGridButton;\n  } else {\n    productsGridButton = arrayToObjectMetafield(arrayMetafields);\n  }\n  return json({\n    productsGridButton\n  });\n};\nexport const action = async ({\n  request\n}) => {\n  const {\n    admin\n  } = await authenticate.admin(request);\n  const formData = await request.formData();\n  const objectFD = Object.fromEntries(formData);\n  const dataFormData = await JSON.parse(String(objectFD.data));\n  const appId = await admin.graphql(GET_CURRENT_APP_ID);\n  const appIdJson = await appId.json();\n  const id = appIdJson.data.currentAppInstallation.id;\n  await admin.graphql(SET_METAFIELDS, {\n    variables: {\n      metafields: [{\n        namespace: Metafields.ProductsGridButton,\n        type: MetafieldsType.Boolean,\n        key: MetafieldsProductsGridButtonKeys.ShowCompareButton,\n        value: String(dataFormData.productsGridButton.showCompareButton),\n        ownerId: id\n      }, {\n        namespace: Metafields.ProductsGridButton,\n        type: MetafieldsType.Boolean,\n        key: MetafieldsProductsGridButtonKeys.ShowIcon,\n        value: String(dataFormData.productsGridButton.showIcon),\n        ownerId: id\n      }, {\n        namespace: Metafields.ProductsGridButton,\n        type: MetafieldsType.Boolean,\n        key: MetafieldsProductsGridButtonKeys.ShowLabel,\n        value: String(dataFormData.productsGridButton.showLabel),\n        ownerId: id\n      }, {\n        namespace: Metafields.ProductsGridButton,\n        type: MetafieldsType.Color,\n        key: MetafieldsProductsGridButtonKeys.BackgroundColor,\n        value: String(dataFormData.productsGridButton.backgroundColor),\n        ownerId: id\n      }, {\n        namespace: Metafields.ProductsGridButton,\n        type: MetafieldsType.Color,\n        key: MetafieldsProductsGridButtonKeys.BorderColor,\n        value: String(dataFormData.productsGridButton.borderColor),\n        ownerId: id\n      }, {\n        namespace: Metafields.ProductsGridButton,\n        type: MetafieldsType.Color,\n        key: MetafieldsProductsGridButtonKeys.AddCompareButtonTextColor,\n        value: String(dataFormData.productsGridButton.addCompareButtonTextColor),\n        ownerId: id\n      }, {\n        namespace: Metafields.ProductsGridButton,\n        type: MetafieldsType.Color,\n        key: MetafieldsProductsGridButtonKeys.RemoveCompareButtonTextColor,\n        value: String(dataFormData.productsGridButton.removeCompareButtonTextColor),\n        ownerId: id\n      }]\n    }\n  });\n  return null;\n};\nexport default function ProductGridPage() {\n  _s();\n  const submit = useSubmit();\n  const {\n    productsGridButton\n  } = useLoaderData();\n  const [showCompareButton, setShowCompareButton] = useState(productsGridButton.showCompareButton === \"true\");\n  const [showIcon, setShowIcon] = useState(productsGridButton.showIcon === \"true\");\n  const [showLabel, setShowLabel] = useState(productsGridButton.showLabel === \"true\");\n  const [backgroundColor, setBackgroundColor] = useState(productsGridButton.backgroundColor);\n  const [borderColor, setBorderColor] = useState(productsGridButton.borderColor);\n  const [addCompareButtonTextColor, setAddCompareButtonTextColor] = useState(productsGridButton.addCompareButtonTextColor);\n  const [removeCompareButtonTextColor, setRemoveCompareButtonTextColor] = useState(productsGridButton.removeCompareButtonTextColor);\n  const [actualData, setActualData] = useState(true);\n  const [loadedData, setLoadedData] = useState(false);\n  const handleShowCompareButtonOnChange = () => {\n    setShowCompareButton(!showCompareButton);\n  };\n  const handleShowLabelOnChange = () => {\n    setShowLabel(!showLabel);\n  };\n  const handleShowIconOnChange = () => {\n    setShowIcon(!showIcon);\n  };\n  const handleBackgroundColorOnChange = color => {\n    setBackgroundColor(color);\n  };\n  const handleBorderColorOnChange = color => {\n    setBorderColor(color);\n  };\n  const handleAddCompareButtonTextColorOnChange = color => {\n    setAddCompareButtonTextColor(color);\n  };\n  const handleRemoveCompareButtonTextColorOnChange = color => {\n    setRemoveCompareButtonTextColor(color);\n  };\n  const currentDataInClientObject = useMemo(() => {\n    return {\n      showCompareButton: String(showCompareButton),\n      showIcon: String(showIcon),\n      showLabel: String(showLabel),\n      backgroundColor: backgroundColor,\n      borderColor: borderColor,\n      addCompareButtonTextColor: addCompareButtonTextColor,\n      removeCompareButtonTextColor: removeCompareButtonTextColor\n    };\n  }, [showCompareButton, showIcon, showLabel, backgroundColor, borderColor, addCompareButtonTextColor, removeCompareButtonTextColor]);\n  const handleSaveOnClick = () => {\n    const data = JSON.stringify({\n      productsGridButton: {\n        showCompareButton: showCompareButton,\n        showIcon: showCompareButton,\n        showLabel: showCompareButton,\n        backgroundColor: showCompareButton,\n        borderColor: showCompareButton,\n        addCompareButtonTextColor: showCompareButton,\n        removeCompareButtonTextColor: showCompareButton\n      }\n    });\n    submit({\n      data\n    }, {\n      method: \"POST\"\n    });\n    setLoadedData(true);\n    return;\n  };\n  const handleDiscardActionOnClick = () => {\n    setShowCompareButton(productsGridButton.showCompareButton === \"true\");\n    setShowIcon(productsGridButton.showIcon === \"true\");\n    setShowLabel(productsGridButton.showLabel === \"true\");\n    setBackgroundColor(productsGridButton.backgroundColor);\n    setBorderColor(productsGridButton.borderColor);\n    setAddCompareButtonTextColor(productsGridButton.addCompareButtonTextColor);\n    setRemoveCompareButtonTextColor(productsGridButton.removeCompareButtonTextColor);\n  };\n  useEffect(() => {\n    setActualData(deepEqualObject(currentDataInClientObject, productsGridButton));\n    setLoadedData(false);\n  }, [productsGridButton, currentDataInClientObject]);\n  return <Frame>\r\n            <InlineStack gap=\"200\" wrap={false}>\r\n                    <Box background={\"bg-fill\"} width={\"400px\"} borderColor={\"border\"} minHeight={\"100vh\"} borderWidth={\"050\"}>\r\n                    <Page>\r\n                        <BlockStack gap={\"300\"}>\r\n                            {!actualData && <>\r\n                                    <ContextualSaveBar alignContentFlush message=\"Unsaved changes\" saveAction={{\n                onAction: handleSaveOnClick,\n                loading: loadedData\n              }} discardAction={{\n                onAction: handleDiscardActionOnClick\n              }} />\r\n                                </>}\r\n\r\n                            <Text as={\"h4\"} variant={\"headingMd\"}>Product Grid Page</Text>\r\n\r\n                            <Divider borderColor={\"border\"} />\r\n\r\n                            <ExceptionList items={[{\n              icon: NoteMinor,\n              description: 'If our app does not work with your theme after turn on widget. Please chat with us to be integrated with your theme quickly.'\n            }]} />\r\n\r\n                            <BooleanSetting title={\"Show Add To Compare button\"} valueOnChange={handleShowCompareButtonOnChange} value={showCompareButton} />\r\n\r\n                            <BooleanSetting title={\"Show Icon\"} value={showIcon} valueOnChange={handleShowIconOnChange} />\r\n\r\n                            <BooleanSetting title={\"Show Label\"} value={showLabel} valueOnChange={handleShowLabelOnChange} />\r\n\r\n                            <Divider borderColor={\"border\"} />\r\n\r\n                            <Text as={\"h4\"} variant={\"headingSm\"}>Style</Text>\r\n\r\n                            <ColorSetting title={\"Background Color\"} initialColor={backgroundColor} onChange={handleBackgroundColorOnChange} />\r\n\r\n                            <ColorSetting title={\"Border Color\"} initialColor={borderColor} onChange={handleBorderColorOnChange} />\r\n\r\n                            <ColorSetting title={\"Add To Compare Text Color\"} initialColor={addCompareButtonTextColor} onChange={handleAddCompareButtonTextColorOnChange} />\r\n\r\n                            <ColorSetting title={\"Remove From Compare Text Color\"} initialColor={removeCompareButtonTextColor} onChange={handleRemoveCompareButtonTextColorOnChange} />\r\n                        </BlockStack>\r\n                    </Page>\r\n                </Box>\r\n                <Box>\r\n                    Iframe Our Button\r\n                </Box>\r\n\r\n            </InlineStack>\r\n        </Frame>;\n}\n_s(ProductGridPage, \"KRt83pHqrpwAefHztJrcCPiOpC0=\", false, function () {\n  return [useSubmit, useLoaderData];\n});\n_c = ProductGridPage;\nvar _c;\n$RefreshReg$(_c, \"ProductGridPage\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["init_esm"]
}
